{"id":"../node_modules/stream-parser/index.js","dependencies":[{"name":"/Users/karinaziebielian/Desktop/projectsGoIt/goit-js-hw-08/package.json","includedInParent":true,"mtime":1643805162460},{"name":"/Users/karinaziebielian/Desktop/projectsGoIt/goit-js-hw-08/.browserslistrc","includedInParent":true,"mtime":1643745144554},{"name":"/Users/karinaziebielian/Desktop/projectsGoIt/goit-js-hw-08/node_modules/stream-parser/package.json","includedInParent":true,"mtime":1643805162243},{"name":"assert","loc":{"line":6,"column":21},"parent":"/Users/karinaziebielian/Desktop/projectsGoIt/goit-js-hw-08/node_modules/stream-parser/index.js","resolved":"/Users/karinaziebielian/Desktop/projectsGoIt/goit-js-hw-08/node_modules/assert/assert.js"},{"name":"debug","loc":{"line":7,"column":20},"parent":"/Users/karinaziebielian/Desktop/projectsGoIt/goit-js-hw-08/node_modules/stream-parser/index.js","resolved":"/Users/karinaziebielian/Desktop/projectsGoIt/goit-js-hw-08/node_modules/stream-parser/node_modules/debug/src/browser.js"},{"name":"process","parent":"/Users/karinaziebielian/Desktop/projectsGoIt/goit-js-hw-08/node_modules/stream-parser/index.js","resolved":"/Users/karinaziebielian/Desktop/projectsGoIt/goit-js-hw-08/node_modules/process/browser.js"},{"name":"buffer","parent":"/Users/karinaziebielian/Desktop/projectsGoIt/goit-js-hw-08/node_modules/stream-parser/index.js","resolved":"/Users/karinaziebielian/Desktop/projectsGoIt/goit-js-hw-08/node_modules/buffer/index.js"}],"generated":{"js":"\nvar Buffer = require(\"buffer\").Buffer;\n\n/**\n * Module dependencies.\n */\n\nvar assert = require('assert');\nvar debug = require('debug')('stream-parser');\n\n/**\n * Module exports.\n */\n\nmodule.exports = Parser;\n\n/**\n * Parser states.\n */\n\nvar INIT        = -1;\nvar BUFFERING   = 0;\nvar SKIPPING    = 1;\nvar PASSTHROUGH = 2;\n\n/**\n * The `Parser` stream mixin works with either `Writable` or `Transform` stream\n * instances/subclasses. Provides a convenient generic \"parsing\" API:\n *\n *   _bytes(n, cb) - buffers \"n\" bytes and then calls \"cb\" with the \"chunk\"\n *   _skipBytes(n, cb) - skips \"n\" bytes and then calls \"cb\" when done\n *\n * If you extend a `Transform` stream, then the `_passthrough()` function is also\n * added:\n *\n *   _passthrough(n, cb) - passes through \"n\" bytes untouched and then calls \"cb\"\n *\n * @param {Stream} stream Transform or Writable stream instance to extend\n * @api public\n */\n\nfunction Parser (stream) {\n  var isTransform = stream && 'function' == typeof stream._transform;\n  var isWritable = stream && 'function' == typeof stream._write;\n\n  if (!isTransform && !isWritable) throw new Error('must pass a Writable or Transform stream in');\n  debug('extending Parser into stream');\n\n  // Transform streams and Writable streams get `_bytes()` and `_skipBytes()`\n  stream._bytes = _bytes;\n  stream._skipBytes = _skipBytes;\n\n  // only Transform streams get the `_passthrough()` function\n  if (isTransform) stream._passthrough = _passthrough;\n\n  // take control of the streams2 callback functions for this stream\n  if (isTransform) {\n    stream._transform = transform;\n  } else {\n    stream._write = write;\n  }\n}\n\nfunction init (stream) {\n  debug('initializing parser stream');\n\n  // number of bytes left to parser for the next \"chunk\"\n  stream._parserBytesLeft = 0;\n\n  // array of Buffer instances that make up the next \"chunk\"\n  stream._parserBuffers = [];\n\n  // number of bytes parsed so far for the next \"chunk\"\n  stream._parserBuffered = 0;\n\n  // flag that keeps track of if what the parser should do with bytes received\n  stream._parserState = INIT;\n\n  // the callback for the next \"chunk\"\n  stream._parserCallback = null;\n\n  // XXX: backwards compat with the old Transform API... remove at some point..\n  if ('function' == typeof stream.push) {\n    stream._parserOutput = stream.push.bind(stream);\n  }\n\n  stream._parserInit = true;\n}\n\n/**\n * Buffers `n` bytes and then invokes `fn` once that amount has been collected.\n *\n * @param {Number} n the number of bytes to buffer\n * @param {Function} fn callback function to invoke when `n` bytes are buffered\n * @api public\n */\n\nfunction _bytes (n, fn) {\n  assert(!this._parserCallback, 'there is already a \"callback\" set!');\n  assert(isFinite(n) && n > 0, 'can only buffer a finite number of bytes > 0, got \"' + n + '\"');\n  if (!this._parserInit) init(this);\n  debug('buffering %o bytes', n);\n  this._parserBytesLeft = n;\n  this._parserCallback = fn;\n  this._parserState = BUFFERING;\n}\n\n/**\n * Skips over the next `n` bytes, then invokes `fn` once that amount has\n * been discarded.\n *\n * @param {Number} n the number of bytes to discard\n * @param {Function} fn callback function to invoke when `n` bytes have been skipped\n * @api public\n */\n\nfunction _skipBytes (n, fn) {\n  assert(!this._parserCallback, 'there is already a \"callback\" set!');\n  assert(n > 0, 'can only skip > 0 bytes, got \"' + n + '\"');\n  if (!this._parserInit) init(this);\n  debug('skipping %o bytes', n);\n  this._parserBytesLeft = n;\n  this._parserCallback = fn;\n  this._parserState = SKIPPING;\n}\n\n/**\n * Passes through `n` bytes to the readable side of this stream untouched,\n * then invokes `fn` once that amount has been passed through.\n *\n * @param {Number} n the number of bytes to pass through\n * @param {Function} fn callback function to invoke when `n` bytes have passed through\n * @api public\n */\n\nfunction _passthrough (n, fn) {\n  assert(!this._parserCallback, 'There is already a \"callback\" set!');\n  assert(n > 0, 'can only pass through > 0 bytes, got \"' + n + '\"');\n  if (!this._parserInit) init(this);\n  debug('passing through %o bytes', n);\n  this._parserBytesLeft = n;\n  this._parserCallback = fn;\n  this._parserState = PASSTHROUGH;\n}\n\n/**\n * The `_write()` callback function implementation.\n *\n * @api private\n */\n\nfunction write (chunk, encoding, fn) {\n  if (!this._parserInit) init(this);\n  debug('write(%o bytes)', chunk.length);\n\n  // XXX: old Writable stream API compat... remove at some point...\n  if ('function' == typeof encoding) fn = encoding;\n\n  data(this, chunk, null, fn);\n}\n\n/**\n * The `_transform()` callback function implementation.\n *\n * @api private\n */\n\n\nfunction transform (chunk, output, fn) {\n  if (!this._parserInit) init(this);\n  debug('transform(%o bytes)', chunk.length);\n\n  // XXX: old Transform stream API compat... remove at some point...\n  if ('function' != typeof output) {\n    output = this._parserOutput;\n  }\n\n  data(this, chunk, output, fn);\n}\n\n/**\n * The internal buffering/passthrough logic...\n *\n * This `_data` function get's \"trampolined\" to prevent stack overflows for tight\n * loops. This technique requires us to return a \"thunk\" function for any\n * synchronous action. Async stuff breaks the trampoline, but that's ok since it's\n * working with a new stack at that point anyway.\n *\n * @api private\n */\n\nfunction _data (stream, chunk, output, fn) {\n  if (stream._parserBytesLeft <= 0) {\n    return fn(new Error('got data but not currently parsing anything'));\n  }\n\n  if (chunk.length <= stream._parserBytesLeft) {\n    // small buffer fits within the \"_parserBytesLeft\" window\n    return function () {\n      return process(stream, chunk, output, fn);\n    };\n  } else {\n    // large buffer needs to be sliced on \"_parserBytesLeft\" and processed\n    return function () {\n      var b = chunk.slice(0, stream._parserBytesLeft);\n      return process(stream, b, output, function (err) {\n        if (err) return fn(err);\n        if (chunk.length > b.length) {\n          return function () {\n            return _data(stream, chunk.slice(b.length), output, fn);\n          };\n        }\n      });\n    };\n  }\n}\n\n/**\n * The internal `process` function gets called by the `data` function when\n * something \"interesting\" happens. This function takes care of buffering the\n * bytes when buffering, passing through the bytes when doing that, and invoking\n * the user callback when the number of bytes has been reached.\n *\n * @api private\n */\n\nfunction process (stream, chunk, output, fn) {\n  stream._parserBytesLeft -= chunk.length;\n  debug('%o bytes left for stream piece', stream._parserBytesLeft);\n\n  if (stream._parserState === BUFFERING) {\n    // buffer\n    stream._parserBuffers.push(chunk);\n    stream._parserBuffered += chunk.length;\n  } else if (stream._parserState === PASSTHROUGH) {\n    // passthrough\n    output(chunk);\n  }\n  // don't need to do anything for the SKIPPING case\n\n  if (0 === stream._parserBytesLeft) {\n    // done with stream \"piece\", invoke the callback\n    var cb = stream._parserCallback;\n    if (cb && stream._parserState === BUFFERING && stream._parserBuffers.length > 1) {\n      chunk = Buffer.concat(stream._parserBuffers, stream._parserBuffered);\n    }\n    if (stream._parserState !== BUFFERING) {\n      chunk = null;\n    }\n    stream._parserCallback = null;\n    stream._parserBuffered = 0;\n    stream._parserState = INIT;\n    stream._parserBuffers.splice(0); // empty\n\n    if (cb) {\n      var args = [];\n      if (chunk) {\n        // buffered\n        args.push(chunk);\n      } else {\n        // passthrough\n      }\n      if (output) {\n        // on a Transform stream, has \"output\" function\n        args.push(output);\n      }\n      var async = cb.length > args.length;\n      if (async) {\n        args.push(trampoline(fn));\n      }\n      // invoke cb\n      var rtn = cb.apply(stream, args);\n      if (!async || fn === rtn) return fn;\n    }\n  } else {\n    // need more bytes\n    return fn;\n  }\n}\n\nvar data = trampoline(_data);\n\n/**\n * Generic thunk-based \"trampoline\" helper function.\n *\n * @param {Function} input function\n * @return {Function} \"trampolined\" function\n * @api private\n */\n\nfunction trampoline (fn) {\n  return function () {\n    var result = fn.apply(this, arguments);\n\n    while ('function' == typeof result) {\n      result = result();\n    }\n\n    return result;\n  };\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/stream-parser/index.js","original":{"line":1,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":2,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":3,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":4,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":5,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":6,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":7,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":8,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":9,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":10,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":11,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":12,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":13,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":14,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":15,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":16,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":17,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":18,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":19,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":20,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":21,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":22,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":23,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":24,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":25,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":26,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":27,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":28,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":29,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":30,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":31,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":32,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":33,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":34,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":35,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":36,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":37,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":38,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":39,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":40,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":41,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":42,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":43,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":44,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":45,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":46,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":47,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":48,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":49,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":50,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":51,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":52,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":53,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":54,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":55,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":56,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":57,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":58,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":59,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":60,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":61,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":62,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":63,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":64,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":65,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":66,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":67,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":68,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":69,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":70,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":71,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":72,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":73,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":74,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":75,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":76,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":77,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":78,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":79,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":80,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":81,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":82,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":83,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":84,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":85,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":86,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":87,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":88,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":89,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":90,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":91,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":92,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":93,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":94,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":95,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":96,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":97,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":98,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":99,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":100,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":101,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":102,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":103,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":104,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":105,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":106,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":107,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":108,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":109,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":110,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":111,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":112,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":113,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":114,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":115,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":116,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":117,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":118,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":119,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":120,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":121,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":122,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":123,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":124,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":125,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":126,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":127,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":128,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":129,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":130,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":131,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":132,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":133,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":134,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":135,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":136,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":137,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":138,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":139,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":140,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":141,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":142,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":143,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":144,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":145,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":146,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":147,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":148,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":149,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":150,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":151,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":152,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":153,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":154,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":155,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":156,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":157,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":158,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":159,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":160,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":161,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":162,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":163,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":164,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":165,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":166,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":167,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":168,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":169,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":170,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":171,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":172,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":173,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":174,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":175,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":176,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":177,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":178,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":179,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":180,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":181,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":182,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":183,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":184,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":185,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":186,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":187,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":188,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":189,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":190,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":191,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":192,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":193,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":194,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":195,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":196,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":197,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":198,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":199,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":200,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":201,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":202,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":203,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":204,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":205,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":206,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":207,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":208,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":209,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":210,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":211,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":212,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":213,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":214,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":215,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":216,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":217,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":218,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":219,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":220,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":221,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":222,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":223,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":224,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":225,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":226,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":227,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":228,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":229,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":230,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":231,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":232,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":233,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":234,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":235,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":236,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":237,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":238,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":239,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":240,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":241,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":242,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":243,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":244,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":245,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":246,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":247,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":248,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":249,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":250,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":251,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":252,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":253,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":254,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":255,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":256,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":257,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":258,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":259,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":260,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":261,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":262,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":263,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":264,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":265,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":266,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":267,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":268,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":269,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":270,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":271,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":272,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":273,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":274,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":275,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":276,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":277,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":278,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":279,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":280,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":281,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":282,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":283,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":284,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":285,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":286,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":287,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":288,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":289,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":290,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":291,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":292,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":293,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":294,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":295,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":296,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":297,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":298,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":299,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/stream-parser/index.js","original":{"line":300,"column":0},"generated":{"line":302,"column":0}}],"sources":{"../node_modules/stream-parser/index.js":"\n/**\n * Module dependencies.\n */\n\nvar assert = require('assert');\nvar debug = require('debug')('stream-parser');\n\n/**\n * Module exports.\n */\n\nmodule.exports = Parser;\n\n/**\n * Parser states.\n */\n\nvar INIT        = -1;\nvar BUFFERING   = 0;\nvar SKIPPING    = 1;\nvar PASSTHROUGH = 2;\n\n/**\n * The `Parser` stream mixin works with either `Writable` or `Transform` stream\n * instances/subclasses. Provides a convenient generic \"parsing\" API:\n *\n *   _bytes(n, cb) - buffers \"n\" bytes and then calls \"cb\" with the \"chunk\"\n *   _skipBytes(n, cb) - skips \"n\" bytes and then calls \"cb\" when done\n *\n * If you extend a `Transform` stream, then the `_passthrough()` function is also\n * added:\n *\n *   _passthrough(n, cb) - passes through \"n\" bytes untouched and then calls \"cb\"\n *\n * @param {Stream} stream Transform or Writable stream instance to extend\n * @api public\n */\n\nfunction Parser (stream) {\n  var isTransform = stream && 'function' == typeof stream._transform;\n  var isWritable = stream && 'function' == typeof stream._write;\n\n  if (!isTransform && !isWritable) throw new Error('must pass a Writable or Transform stream in');\n  debug('extending Parser into stream');\n\n  // Transform streams and Writable streams get `_bytes()` and `_skipBytes()`\n  stream._bytes = _bytes;\n  stream._skipBytes = _skipBytes;\n\n  // only Transform streams get the `_passthrough()` function\n  if (isTransform) stream._passthrough = _passthrough;\n\n  // take control of the streams2 callback functions for this stream\n  if (isTransform) {\n    stream._transform = transform;\n  } else {\n    stream._write = write;\n  }\n}\n\nfunction init (stream) {\n  debug('initializing parser stream');\n\n  // number of bytes left to parser for the next \"chunk\"\n  stream._parserBytesLeft = 0;\n\n  // array of Buffer instances that make up the next \"chunk\"\n  stream._parserBuffers = [];\n\n  // number of bytes parsed so far for the next \"chunk\"\n  stream._parserBuffered = 0;\n\n  // flag that keeps track of if what the parser should do with bytes received\n  stream._parserState = INIT;\n\n  // the callback for the next \"chunk\"\n  stream._parserCallback = null;\n\n  // XXX: backwards compat with the old Transform API... remove at some point..\n  if ('function' == typeof stream.push) {\n    stream._parserOutput = stream.push.bind(stream);\n  }\n\n  stream._parserInit = true;\n}\n\n/**\n * Buffers `n` bytes and then invokes `fn` once that amount has been collected.\n *\n * @param {Number} n the number of bytes to buffer\n * @param {Function} fn callback function to invoke when `n` bytes are buffered\n * @api public\n */\n\nfunction _bytes (n, fn) {\n  assert(!this._parserCallback, 'there is already a \"callback\" set!');\n  assert(isFinite(n) && n > 0, 'can only buffer a finite number of bytes > 0, got \"' + n + '\"');\n  if (!this._parserInit) init(this);\n  debug('buffering %o bytes', n);\n  this._parserBytesLeft = n;\n  this._parserCallback = fn;\n  this._parserState = BUFFERING;\n}\n\n/**\n * Skips over the next `n` bytes, then invokes `fn` once that amount has\n * been discarded.\n *\n * @param {Number} n the number of bytes to discard\n * @param {Function} fn callback function to invoke when `n` bytes have been skipped\n * @api public\n */\n\nfunction _skipBytes (n, fn) {\n  assert(!this._parserCallback, 'there is already a \"callback\" set!');\n  assert(n > 0, 'can only skip > 0 bytes, got \"' + n + '\"');\n  if (!this._parserInit) init(this);\n  debug('skipping %o bytes', n);\n  this._parserBytesLeft = n;\n  this._parserCallback = fn;\n  this._parserState = SKIPPING;\n}\n\n/**\n * Passes through `n` bytes to the readable side of this stream untouched,\n * then invokes `fn` once that amount has been passed through.\n *\n * @param {Number} n the number of bytes to pass through\n * @param {Function} fn callback function to invoke when `n` bytes have passed through\n * @api public\n */\n\nfunction _passthrough (n, fn) {\n  assert(!this._parserCallback, 'There is already a \"callback\" set!');\n  assert(n > 0, 'can only pass through > 0 bytes, got \"' + n + '\"');\n  if (!this._parserInit) init(this);\n  debug('passing through %o bytes', n);\n  this._parserBytesLeft = n;\n  this._parserCallback = fn;\n  this._parserState = PASSTHROUGH;\n}\n\n/**\n * The `_write()` callback function implementation.\n *\n * @api private\n */\n\nfunction write (chunk, encoding, fn) {\n  if (!this._parserInit) init(this);\n  debug('write(%o bytes)', chunk.length);\n\n  // XXX: old Writable stream API compat... remove at some point...\n  if ('function' == typeof encoding) fn = encoding;\n\n  data(this, chunk, null, fn);\n}\n\n/**\n * The `_transform()` callback function implementation.\n *\n * @api private\n */\n\n\nfunction transform (chunk, output, fn) {\n  if (!this._parserInit) init(this);\n  debug('transform(%o bytes)', chunk.length);\n\n  // XXX: old Transform stream API compat... remove at some point...\n  if ('function' != typeof output) {\n    output = this._parserOutput;\n  }\n\n  data(this, chunk, output, fn);\n}\n\n/**\n * The internal buffering/passthrough logic...\n *\n * This `_data` function get's \"trampolined\" to prevent stack overflows for tight\n * loops. This technique requires us to return a \"thunk\" function for any\n * synchronous action. Async stuff breaks the trampoline, but that's ok since it's\n * working with a new stack at that point anyway.\n *\n * @api private\n */\n\nfunction _data (stream, chunk, output, fn) {\n  if (stream._parserBytesLeft <= 0) {\n    return fn(new Error('got data but not currently parsing anything'));\n  }\n\n  if (chunk.length <= stream._parserBytesLeft) {\n    // small buffer fits within the \"_parserBytesLeft\" window\n    return function () {\n      return process(stream, chunk, output, fn);\n    };\n  } else {\n    // large buffer needs to be sliced on \"_parserBytesLeft\" and processed\n    return function () {\n      var b = chunk.slice(0, stream._parserBytesLeft);\n      return process(stream, b, output, function (err) {\n        if (err) return fn(err);\n        if (chunk.length > b.length) {\n          return function () {\n            return _data(stream, chunk.slice(b.length), output, fn);\n          };\n        }\n      });\n    };\n  }\n}\n\n/**\n * The internal `process` function gets called by the `data` function when\n * something \"interesting\" happens. This function takes care of buffering the\n * bytes when buffering, passing through the bytes when doing that, and invoking\n * the user callback when the number of bytes has been reached.\n *\n * @api private\n */\n\nfunction process (stream, chunk, output, fn) {\n  stream._parserBytesLeft -= chunk.length;\n  debug('%o bytes left for stream piece', stream._parserBytesLeft);\n\n  if (stream._parserState === BUFFERING) {\n    // buffer\n    stream._parserBuffers.push(chunk);\n    stream._parserBuffered += chunk.length;\n  } else if (stream._parserState === PASSTHROUGH) {\n    // passthrough\n    output(chunk);\n  }\n  // don't need to do anything for the SKIPPING case\n\n  if (0 === stream._parserBytesLeft) {\n    // done with stream \"piece\", invoke the callback\n    var cb = stream._parserCallback;\n    if (cb && stream._parserState === BUFFERING && stream._parserBuffers.length > 1) {\n      chunk = Buffer.concat(stream._parserBuffers, stream._parserBuffered);\n    }\n    if (stream._parserState !== BUFFERING) {\n      chunk = null;\n    }\n    stream._parserCallback = null;\n    stream._parserBuffered = 0;\n    stream._parserState = INIT;\n    stream._parserBuffers.splice(0); // empty\n\n    if (cb) {\n      var args = [];\n      if (chunk) {\n        // buffered\n        args.push(chunk);\n      } else {\n        // passthrough\n      }\n      if (output) {\n        // on a Transform stream, has \"output\" function\n        args.push(output);\n      }\n      var async = cb.length > args.length;\n      if (async) {\n        args.push(trampoline(fn));\n      }\n      // invoke cb\n      var rtn = cb.apply(stream, args);\n      if (!async || fn === rtn) return fn;\n    }\n  } else {\n    // need more bytes\n    return fn;\n  }\n}\n\nvar data = trampoline(_data);\n\n/**\n * Generic thunk-based \"trampoline\" helper function.\n *\n * @param {Function} input function\n * @return {Function} \"trampolined\" function\n * @api private\n */\n\nfunction trampoline (fn) {\n  return function () {\n    var result = fn.apply(this, arguments);\n\n    while ('function' == typeof result) {\n      result = result();\n    }\n\n    return result;\n  };\n}\n"},"lineCount":302}},"error":null,"hash":"1051ff6badaaf665c9b830cb0b8660c4","cacheData":{"env":{}}}